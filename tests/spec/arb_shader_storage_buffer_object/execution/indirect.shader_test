# Tests (dynamically uniform) indirect indexing of SSBOs.

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_shader_storage_buffer_object
GL_ARB_gpu_shader5

[vertex shader]
#version 330

uniform int u_idx;
in vec4 piglit_vertex;
flat out int idx;

void main() {
	idx = u_idx;
	gl_Position = piglit_vertex;
}

[fragment shader]
#version 330
#extension GL_ARB_gpu_shader5: require
#extension GL_ARB_shader_storage_buffer_object: require

layout(binding = 0) buffer Data {
	vec4 color;
	float color_scale;
	int val;
} data[2];

flat in int idx;
out vec4 outcolor;

void main() {
    outcolor = data[idx].color * data[idx].color_scale;
    data[idx].val = idx + 1;
}

[test]
ssbo 0 32
ssbo 0 subdata float 0 1.0
ssbo 0 subdata float 4 2.0
ssbo 0 subdata float 12 2.0
ssbo 0 subdata float 16 0.5
ssbo 0 subdata int 20 1000

ssbo 1 32
ssbo 1 subdata float 0 1.0
ssbo 1 subdata float 4 2.0
ssbo 1 subdata float 12 4.0
ssbo 1 subdata float 16 0.25

clear color 1.0 0.0 0.0 1.0
clear

uniform int u_idx 0

draw rect -1 -1 2 2
probe all rgba 0.5 1.0 0.0 1.0
probe ssbo uint 0 20 == 1

uniform int u_idx 1

draw rect -1 -1 2 2
probe all rgba 0.25 0.5 0.0 1.0
probe ssbo uint 1 20 == 2
